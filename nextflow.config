process {
    publishDir = {"./results/$sid/$task.process"}
    scratch = "/tmp"
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries = 3
    maxErrors = -1
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    tag = { "$sid" }
    afterScript = 'sleep 1'
}

params {
    //**Global options**//
        b0_thr_extract_b0=10
        dwi_shell_tolerance=20

    //**Preliminary DWI brain extraction**//
        dilate_b0_mask_prelim_brain_extraction=5
        bet_prelim_f=0.16

    //**Denoise dwi (dwidenoise in Mrtrix3)**//
        run_dwi_denoising=true
        extent=7

    //**Topup**//
        run_topup=true
        config_topup="b02b0.cnf"
        encoding_direction="y"
        readout=0.062
        prefix_topup="topup_results"

    //**Eddy**//
        run_eddy=true
        eddy_cmd="eddy_openmp"
        bet_topup_before_eddy_f=0.16
        use_slice_drop_correction=true

    //**Final DWI BET**//
        bet_dwi_final_f=0.16

    //**Resample DWI**//
        run_resample_dwi=true
        dwi_resolution=1
        dwi_interpolation="lin"

    //**Number of processes per tasks**//
        processes_denoise_dwi=4
        processes_eddy=1

    //**Output directory**//
        output_dir=false

    //**Process control**//
        processes = false

    Mean_FRF_Publish_Dir = "./results/Mean_FRF"
    Readme_Publish_Dir = "./results/Readme"
    Read_BIDS_Publish_Dir = "./results/Read_BIDS"
}

if(params.output_dir) {
    process.publishDir = {"$params.output_dir/$sid/$task.process"}
    params.Mean_FRF_Publish_Dir = "${params.output_dir}/Mean_FRF"
    params.Readme_Publish_Dir = "${params.output_dir}/Readme"
    params.Read_BIDS_Publish_Dir = "${params.output_dir}/Read_BIDS"
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus = params.processes
    }
}

singularity.autoMounts=true

profiles {

    use_cuda {
        singularity.runOptions='--nv'
        params.eddy_cmd="eddy_cuda"
    }

}
